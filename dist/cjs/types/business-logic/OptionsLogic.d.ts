import { CSSProperties } from "react";
import { CarouselItemProps } from "../components/CarouselItem";
import { CarouselItemViewerCustomButtonProps } from "../components/item-viewer/toolbar/CarouselItemViewerCustomButton";
import { CarouselElement, CarouselOptions, CarouselSection, CarouselVideoCurrentStateIndicatorButtonName, SpacingDirection } from "../types";
import { CarouselContextInputProps } from "../context";
export type OptionsConstructor = {
    options: CarouselOptions;
    currentItem?: CarouselItemProps;
    isFullscreenMode: boolean;
    numberOfPages?: number;
    items?: CarouselItemProps[];
} & Pick<CarouselContextInputProps, 'carouselContainerRef'>;
export declare class OptionsLogic {
    private bodyFontFamily;
    carouselContainerRef: import("react").MutableRefObject<HTMLDivElement> | undefined;
    private currentItem;
    private defaultFontFamily;
    private isFullscreenMode;
    private items;
    private numberOfPages;
    private options;
    constructor(constructor: OptionsConstructor);
    get allFillColor(): string | undefined;
    get allFontFamily(): string | undefined;
    get autoChangePage(): boolean;
    get autoHideToolbarDuration(): number;
    get containerBackgroundColor(): string;
    get containerMargin(): {
        bottom: string | number | (string & {}) | undefined;
        left: string | number | (string & {}) | undefined;
        right: string | number | (string & {}) | undefined;
        top: string | number | (string & {}) | undefined;
    };
    get containerPadding(): {
        bottom: string | number | (string & {}) | undefined;
        left: string | number | (string & {}) | undefined;
        right: string | number | (string & {}) | undefined;
        top: string | number | (string & {}) | undefined;
    };
    get defaultButtonSize(): 18 | 24;
    get isDefaultItemDisplayLocation(): boolean;
    get itemDisplayLocation(): import("../types").CarouselItemDisplayLocation;
    get isItemDisplayLocationAbove(): boolean;
    get isItemDisplayLocationBelow(): boolean;
    get isItemVierAspectRatioGiven(): boolean;
    get isItemViewerSwipingDisabled(): boolean;
    get isLastPageFlush(): boolean;
    get isMobile(): boolean;
    get isNavigationSwipingDisabled(): boolean;
    get isToolbarInVideo(): boolean;
    get isWrappingDisabled(): boolean;
    get itemContainerContentJustification(): CSSProperties['justifyContent'];
    get itemStyles(): CSSProperties;
    get itemViewerAspectRatio(): number | "auto";
    get itemViewerBackgroundColor(): string;
    get itemViewerFontFamily(): string;
    get itemViewerMaxClickThreshold(): number;
    get itemViewerPreviewBackground(): string;
    get itemViewerPreviewBorder(): string | number | (string & {}) | undefined;
    get itemViewerPreviewBorderRadius(): string | number | (string & {}) | undefined;
    get itemViewerPreviewHeight(): number;
    get itemViewerPreviewImageFit(): import("csstype").Property.ObjectFit | undefined;
    get itemViewerPreviewImagePosition(): string | number | (string & {}) | undefined;
    get itemViewerPreviewIsVisible(): boolean;
    get itemViewerPreviewOpacity(): (string & {}) | "-moz-initial" | "inherit" | "initial" | "revert" | "revert-layer" | "unset" | (number & {}) | undefined;
    get itemViewerPreviewSwapImageAndText(): boolean;
    get itemViewerPreviewTextBodyColor(): string | undefined;
    get itemViewerPreviewTextBodyFontFamily(): (string & {}) | "-moz-initial" | "inherit" | "initial" | "revert" | "revert-layer" | "unset" | "cursive" | "fantasy" | "monospace" | "sans-serif" | "serif" | undefined;
    get itemViewerPreviewTextBodySize(): number;
    get itemViewerPreviewTextHeaderColor(): string | undefined;
    get itemViewerPreviewTextHeaderFontFamily(): (string & {}) | "-moz-initial" | "inherit" | "initial" | "revert" | "revert-layer" | "unset" | "cursive" | "fantasy" | "monospace" | "sans-serif" | "serif" | undefined;
    get itemViewerPreviewTextHeaderSize(): number;
    get itemViewerPreviewTextContainerPadding(): {
        top: any;
        bottom: any;
        left: any;
        right: any;
    };
    get itemViewerPreviewTextContainerVerticalAlignment(): (string & {}) | "-moz-initial" | "inherit" | "initial" | "revert" | "revert-layer" | "unset" | "stretch" | "center" | "end" | "flex-end" | "flex-start" | "start" | "baseline" | "normal" | "self-end" | "self-start" | undefined;
    get itemViewerPreviewWidth(): number;
    get itemViewerUseRecommendedAspectRatio(): boolean;
    get maxHeight(): number;
    get modalBackgroundColor(): string;
    get modalCloseButtonColor(): string;
    get modalCloseButtonSize(): number;
    get modalCloseButtonWidth(): number | undefined;
    get modalFontSize(): number;
    get modalMaintainMinimizedStateAcrossItems(): boolean;
    get modalMinimizeOnClick(): boolean;
    get modalPadding(): {
        top: any;
        bottom: any;
        left: any;
        right: any;
    };
    get modalOpacityWhenMinimized(): string;
    get modalTextColor(): string;
    getModalWidth(isMinimized: boolean): string;
    get navigationFontFamily(): string;
    get navigationBackground(): string | undefined;
    get navigationMaxClickThreshold(): number;
    get progressBarShouldSpanEntireWidth(): boolean;
    get theme(): {
        colorOne: string;
        colorTwo: string;
        colorThree: string;
        colorFour: string;
        colorFive: string;
        colorGreyOne: string;
    };
    get thumbnailBorderString(): string | number | (string & {}) | undefined;
    get thumbnailOverlayBackgroundSolid(): {
        opacity: number;
        color: string;
    };
    get thumbnailOverlayBackgroundGradient(): {
        angle: number;
        endColor: string;
        endOpacity: number;
        startColor: string;
        startOpacity: number;
    };
    get thumbnailOverlayIsDisabled(): boolean;
    get thumbnailOverlayIsHidden(): boolean;
    get thumbnailOverlayText(): {
        color: string;
        fontSize: number;
        maxLineCount: number;
    };
    get thumbnailPositioning(): import("../types").CarouselItemThumbnailPositioning | undefined;
    get thumbnailSize(): number;
    get thumbnailSpacingStrategy(): "min" | "max";
    get toolbarBackgroundColor(): string;
    get toolbarShortcutIndicator(): {
        backgroundColor: string;
        textColor: string;
    };
    get toolbarTextColor(): string;
    get useDefaultVideoControls(): boolean;
    get videoCurrentStateIndicatorBackgroundColor(): string;
    get videoCurrentStateIndicatorForegroundColor(): string;
    get videoCurrentStateIndicatorSize(): number;
    get videoProgressBarBackgroundColor(): string;
    get videoProgressBarDotSettings(): {
        diameter: number;
        isAlwaysVisible: boolean;
        transitionDuration: number;
    };
    get videoProgressBarForegroundColor(): string;
    get videoProgressBarHitSlop(): {
        top: number;
        bottom: number;
    };
    get videoProgressBarScaleAmount(): number;
    get videoProgressBarScreenshotViewer(): {
        width: number;
        height: number;
        textColor: string;
    };
    get videoProgressBarSectionGap(): number;
    get videoProgressBarSeekColor(): string;
    get videoProgressBarShowCurrentPosition(): boolean;
    get videoProgressBarHeight(): number;
    get videoSeekAmount(): number;
    getButtonColor(buttonName: CarouselElement, fallbackColor?: string): string;
    getButtonSize(buttonName: CarouselElement, defaultOverride?: number): number;
    getPaddingAmount(direction: SpacingDirection, item: CarouselSection, defaultOverride?: number): any;
    getThumbnailSpacingBasedOnThumbnailPositioning(valueToUseIfNoPositioningGiven?: number): number;
    getThumbnailSpacing(defaultValue?: number): number;
    getVideoCurrentStateIndicatorButtonColor(buttonName: CarouselVideoCurrentStateIndicatorButtonName): string | undefined;
    getXlinkHref(xlinkHref: CarouselItemViewerCustomButtonProps['xlinkHref']): string | undefined;
    private getCustomPadding;
}
