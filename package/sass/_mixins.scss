@mixin button(
    $height: $buttonWidth,
    $width: $buttonWidth,
    $opacity: $itemViewerButtonOpacityNormal, 
    $opacityHover: $itemViewerButtonOpacityHover,
    $backgroundColor: $itemViewerButtonColor,
) {
    overflow: hidden;
    height: $height;
    width: $width;
    border: none;
    position: relative;
    background-color: transparent;
    display: flex;

    @include increaseOpacityOnHover($opacity, $opacityHover);

    & * {
        background-color: $backgroundColor;
        fill: $backgroundColor;
    }
}

@mixin button--inverse {
    fill: $itemViewerBackgroundColor;
    stroke: $itemViewerButtonColor;
}

@mixin closeButton() {
    &--close {
        &-left, &-right {
            @include positionButton(var(--rotation));

            &-inverse {
                background-color: $itemViewerBackgroundColor;
                margin-top: 0;
            }
        }

        &-left {
            --rotation: -45deg;
        }

        &-right {
            --rotation: 45deg;
        }
    }
}

@mixin displayFlexCenter(
    $direction: row,
    $rowGap: 0px,
    $columnGap: 0px,
) {
    display: flex;
    flex-direction: $direction;
    align-items: center;
    justify-content: center;
    row-gap: $rowGap;
    column-gap: $columnGap;
}

@mixin maxTextLineCount($maxLineCount: 4) {
    display: -webkit-box;
    -webkit-line-clamp: $maxLineCount;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin increaseOpacityOnHover(
    $opacityStart: $itemViewerButtonOpacityNormal,    
    $opacityHover: $itemViewerButtonOpacityHover,
) {
    opacity: $opacityStart !important;
    &:hover {
        opacity: $opacityHover !important;
        cursor: pointer !important;
    }
}

@mixin positionButton(
    $rotation: 0, 
    $positioning: absolute,
    $xTranslate: -50%,
    $yTranslate: -50%,
    $top: 50%,
    $left: 50%,
    $right: auto,
    $bottom: auto,
) {
    position: $positioning;
    top: $top;
    left: $left;
    right: $right;
    bottom: $bottom;
    transform: translate($xTranslate, $yTranslate) rotate($rotation);
}

@mixin positionAbsolute(
    $bottom: 0,
    $left: 0,
    $right: 0,
    $top: 0,
) {
    position: absolute;
    bottom: $bottom;
    left: $left;
    right: $right;
    top: $top;
}

@mixin positionCenter {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin scaleOnHover($scaleAmount: 1.15) {
    &:hover {
        transition: transform $carouselAnimationDuration ease;
        transform: scale($scaleAmount);
    }
}

@mixin triangle($direction: right) {
    @if ($direction == left) {
        border-right: calc(#{$buttonWidth} / 2.5) solid $itemViewerButtonColor;
    }
    @if ($direction == right) {
        border-left: calc(#{$buttonWidth} / 2.5) solid $itemViewerButtonColor;
    }
    
    background-color: transparent;
    width: 0;
    height: 0;
    border-top: calc(#{$buttonWidth} / 2.25) solid transparent;
    border-bottom: calc(#{$buttonWidth} / 2.25) solid transparent;
}

@mixin unselectable() {
    -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: text; /* Safari 'none' or 'text' here 'all' has issues*/
    -khtml-user-select: none; /* Konqueror HTML */
    -moz-user-select: none; /* Old versions of Firefox */
    -ms-user-select: none; /* Internet Explorer/Edge */
    user-select: none; /* Non-prefixed version, currently supported by Chrome, Opera and Firefox */
}

//Media Query Manager
@mixin respond($breakpoint) {
	@if $breakpoint == phone {
		@media only screen and (max-width: 655px) {
			@content;
		}
	}
	@if $breakpoint == hover {
		@media only screen and (hover) {
			@content;
		}
	}
	@if $breakpoint == mobile {
		@media only screen and (hover: none) {
			@content;
		}
	}
}
